/*
 * fileinputpath.java
 *
 * Created on __DATE__, __TIME__
 */

package form;

import java.awt.Panel;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.concurrent.CountDownLatch;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

import com.sunmap.shpdata.tools.conf.ConfPro;
import com.sunmap.shpdata.tools.conf.ShpConf;
import com.sunmap.shpdata.tools.dao.ParseHead;
import com.sunmap.shpdata.tools.daoimpl.shpparseimpl.ParseHeadImpl;
import com.sunmap.shpdata.tools.util.Util;

/**
 * 
 * @author __USER__
 */
public class Fileinputpath extends javax.swing.JFrame {

	private String imtypeString;
	private String inputString;
	private Form ftemFf;

	/** Creates new form fileinputpath */
	public Fileinputpath() {
		initComponents();
	}

	public Fileinputpath(String imtypeString, String inputString, Form f) {
		this.imtypeString = imtypeString;
		this.inputString = inputString;
		this.ftemFf = f;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		this.setLocation(350, 300);
		buttonGroup1 = new javax.swing.ButtonGroup();
		jScrollPane1 = new javax.swing.JScrollPane();
		jPanel1 = new javax.swing.JPanel();
		jRadioButton1 = new javax.swing.JRadioButton();
		jLabel1 = new javax.swing.JLabel();
		jRadioButton2 = new javax.swing.JRadioButton();
		jTextField1 = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jTextField2 = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		jCheckBoxParent = new JCheckBox("Shpdes专用");
		jCheckBoxParent.setBounds(590, 90, 100, 20);
		jCheckBoxParent.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if(jCheckBoxParent.isSelected()){
					jCheckBoxParent.setSelected(false);
//					JOptionPane jop = new JOptionPane();
//					jop.showMessageDialog(null, "如果您要做ShpDes,要素的父文件夹可代表其区域,则选择此项!");
					ForShpDes fsd = new ForShpDes(Fileinputpath.this, true, jCheckBoxParent);
					fsd.setVisible(true);
				}
				
			}
			
		});
		jCheckBox = new JCheckBox("配置要素地区标示");
		jCheckBox.setBounds(450, 90, 130, 20);
		jCheckBox.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (jCheckBox.isSelected()) {
					Treet treet = new Treet(new JFrame(), true);
					treet.addWindowListener(new WindowAdapter() {
						public void windowClosing(WindowEvent e) {
							// TODO Auto-generated method stub
							// ((Fileinputpath)e.getWindow()).setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
							// setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
							e.getWindow().dispose();
							jCheckBox.setSelected(false);
						}
					});
					treet.setVisible(true);
				}
			}

		});
		this.setTitle("数据导入工具");
		// setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		jScrollPane1.setBorder(javax.swing.BorderFactory
				.createTitledBorder("数据导入选择："));
		jScrollPane1
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPane1
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

		jRadioButton1.setText("SHP导入");
		jRadioButton1.setActionCommand("shp");
		jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButton1ActionPerformed(evt);
			}
		});
		jLabel1.setText("导入数据格式：");

		jRadioButton2.setText("KIWI导入");
		jRadioButton2.setActionCommand("Kiwi");
		jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButton2ActionPerformed(evt);
			}
		});
		if (imtypeString != null && inputString != null) {

			if (jRadioButton1.getText().equals(
					imtypeString.toUpperCase() + "\u5bfc\u5165")) {
				jRadioButton1.setSelected(true);
			} else if (jRadioButton2.getText().equals(
					imtypeString.toUpperCase() + "\u5bfc\u5165")) {
				jRadioButton2.setSelected(true);
			}
			if (inputString != null || !"".equals(inputString)) {
				jTextField1.setText(Util.UnicodeToString(inputString));
			}
		}
		buttonGroup1.add(jRadioButton1);
		buttonGroup1.add(jRadioButton2);
		jLabel2.setText("导入数据路径：");

		jButton1.setText("选择路径");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("确定");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jLabel3.setText("导入开启的线程数：");

		// jTextField2.addActionListener(new java.awt.event.ActionListener() {
		// public void actionPerformed(java.awt.event.ActionEvent evt) {
		// jTextField2ActionPerformed(evt);
		// }
		// });
		jTextField2.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				jTextField2ActionPerformed(e);
			}

		});
		// jLabel4.setText("\u89e3\u6790\u5f53\u4e2d\u8bf7\u7b49\u5f85....");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGap(44, 44, 44)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel1)
														.addComponent(jLabel2))
										.addGap(61, 61, 61)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				jTextField1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				276,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				47,
																				Short.MAX_VALUE)
																		.addComponent(
																				jButton1)
																		.addGap(
																				99,
																				99,
																				99))
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				jRadioButton1)
																		.addGap(
																				64,
																				64,
																				64)
																		.addComponent(
																				jRadioButton2)
																		.addGap(
																				42,
																				42,
																				42)
																		.addComponent(
																				jLabel3)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jTextField2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				54,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addContainerGap())))
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGap(247, 247, 247)
										.addComponent(
												jButton2,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												94,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(72, 72, 72)
										.addComponent(
												jLabel4,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												143,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(136, Short.MAX_VALUE)));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jRadioButton1)
														.addComponent(jLabel1)
														.addComponent(
																jRadioButton2)
														.addComponent(jLabel3)
														.addComponent(
																jTextField2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel2)
														.addComponent(
																jTextField1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jButton1))
										.addGap(18, 18, 18)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jButton2)
														.addComponent(jLabel4))
										.addContainerGap(76, Short.MAX_VALUE)));
		jPanel1.add(jCheckBox);
		jPanel1.add(jCheckBoxParent);
		jScrollPane1.setViewportView(jPanel1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(
						jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE,
						708, Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(
						jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE,
						147, Short.MAX_VALUE).addContainerGap()));
		this.setIconImage(Toolkit.getDefaultToolkit().createImage(
				this.getClass().getResource("/load1/apple.JPG")));
		pack();
	}// </editor-fold>

	// GEN-END:initComponents

	private void jTextField2ActionPerformed(FocusEvent e) {
		JOptionPane jop = new JOptionPane();

		if (jTextField2.getText() != null && !"".equals(jTextField2.getText())) {

			if (!jTextField2.getText().matches("^[1-9]*[0-9]$")) {
				jop.showMessageDialog(null, "请输入正整数");
				jTextField2.setText("");
				return;
			}
			if (Integer.parseInt(jTextField2.getText()) > 14) {
				jop.showMessageDialog(null, "抱歉线程请设定在较安全的范围内（最高不可超过14个线程）");
				jTextField2.setText("");
				return;
			}
		}
	}

	// private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {
	// // TODO add your handling code here:
	// }

	private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		if (jRadioButton2.isSelected()) {

		}
	}

	private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		if (jRadioButton1.isSelected()) {

		}
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		JOptionPane jop = new JOptionPane();
		ConfPro confPro = new ConfPro();
		if ((!jRadioButton1.isSelected() && !jRadioButton2.isSelected())
				|| (jTextField1.getText() == null || "".equals(jTextField1
						.getText()))) {
			jop.showMessageDialog(null, "您没有选择导入类型或您没有填写导入数据路径");
			return;
		}
		if (jTextField2.getText() == null
				|| "".equals(jTextField2.getText().trim())) {
			confPro.setShpThreadnum("4");
		} else {
			confPro.setShpThreadnum(jTextField2.getText());
		}
		if (ftemFf != null) {
			ftemFf.dispose();
		}
		if (!jCheckBox.isSelected()) {
			File file = new File("div.xml");
			try {
				if (file.exists()) {
					file.delete();
				}
				file.createNewFile();
				FileWriter fileWriter = new FileWriter(file);
				fileWriter.write("<div>/n/r</div>");
				fileWriter.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				jop.showMessageDialog(null, "系统出错，请联系维护人员");
			}

		}
		confPro.setImportType(buttonGroup1.getSelection().getActionCommand());
		confPro.setInputPath(jTextField1.getText());
		if (jRadioButton1.isSelected()) {
			confPro.setShpFileType();
		}
		this.dispose();
		final Waiting dialog = new Waiting(new javax.swing.JFrame(), true);
		new Thread() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				super.run();
				// abc();
				ShpConf conf = new ShpConf();
				String strPath = conf.getInputpath();
				// 1.获得文件列表
				List<File> fileList = Util.getFileList(strPath);
				ParseHead parseHead = new ParseHeadImpl();
				try {
					parseHead.createResolveTables(fileList);
					dialog.dispose();
					Form f1 = new Form();
					f1.setResizable(false);
					f1.setVisible(true);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					dialog.dispose();
					JOptionPane jop1 = new JOptionPane();
					jop1.showMessageDialog(null, "解析出错请检查");
					File file1 = new File("error.txt");
					try {
						file1.createNewFile();
						if (file1.exists()) {
							file1.delete();
						}
						FileWriter out = new FileWriter(file1, true);
						PrintWriter writer = new PrintWriter(out);
						e.printStackTrace(writer);
						writer.close();
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					e.printStackTrace();
					setVisible(true);
					return;
				}
			};
		}.start();

		dialog.setVisible(true);
	}

	// private void bcd() {
	// // TODO Auto-generated method stub
	// jLabel4.setText("\u89e3\u6790\u5f53\u4e2d\u8bf7\u7b49\u5f85....");
	// jLabel4.invalidate();
	// }

	private boolean abc() {
		for (int i = 0; i < 1000000; i++) {
			System.out.println(i);
		}
		// fale = true;
		return true;
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser f = new JFileChooser("");
		int a = 0;
		for (int i = 0; i < 1000000; i++) {
			a = a + i;
			a++;
		}
		f.setFileSelectionMode(f.DIRECTORIES_ONLY);
		int i = f.showOpenDialog(Fileinputpath.this);
		if (i == f.APPROVE_OPTION) {
			File file = f.getSelectedFile();
			strPath = file.getPath();
			jTextField1.setText(strPath);
		}
		System.out.println(strPath);
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Fileinputpath().setVisible(true);
			}
		});
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JRadioButton jRadioButton1;
	private javax.swing.JRadioButton jRadioButton2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	private String strPath;
	private JCheckBox jCheckBox;
	private JCheckBox jCheckBoxParent;
	// End of variables declaration//GEN-END:variables
	
	
//	class ForShpDes extends javax.swing.JDialog{
//		private java.awt.Frame parent;
//		private boolean modal;
//		public ForShpDes(java.awt.Frame parent, boolean modal) {
//			// TODO Auto-generated constructor stub
//			super(parent,modal);
//			this.parent = parent;
//			this.modal = modal;
//			this.initComponents();
//		}
//		
//		private void initComponents(){
////			this.setLocation(440, 300);
//			int with = 250;
//			int high = 150;
//			this.setBounds(600, 330, with, high);
//			getContentPane().setLayout(null);
////			this.setSize(300, 200);
//			this.setTitle("针对于shp导入");
//			JPanel jPanel = new JPanel();
//			jPanel.setLayout(null);
//			jPanel.setBounds(0,0,with,high);
//			jPanel.setBackground(new java.awt.Color(244, 241, 229));
//			JButton jButton_a = new JButton("确定");
//			JButton jButton_b = new JButton("取消");
//			jButton_a.setBounds(600, 330, 60, 30);
//			jButton_b.setBounds(800, 300, 60, 30);
//			jPanel.add(jButton_a,null);
//			jPanel.add(jButton_b,null);
//			this.getContentPane().add(jPanel,null);
//			
////			pack();
//		}
//	}
}