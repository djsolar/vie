/*
 * f.java
 *
 * Created on __DATE__, __TIME__
 */

package form;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.Map.Entry;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

import com.sunmap.shpdata.tools.conf.ShpConf;
import com.sunmap.shpdata.tools.dao.TableDAO;
import com.sunmap.shpdata.tools.daoimpl.shpdaoimpl.ShpTableDaoImpl;
import com.sunmap.shpdata.tools.main.ImportData;
import com.sunmap.shpdata.tools.main.ImportMain;
import com.sunmap.shpdata.tools.util.Util;
import com.sunmap.shpdata.tools.vo.Table;

/**
 * 
 * @author __USER__
 */
public class Form extends javax.swing.JFrame {

	/** Creates new form f */
	public Form() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		this.setLocation(440, 150);
		desktopPane = new javax.swing.JDesktopPane();
		jScrollPane1 = new javax.swing.JScrollPane();
		jPanel1 = new javax.swing.JPanel();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jScrollPane4 = new javax.swing.JScrollPane();
		jPanel2 = new JPanel();
		jPanel4 = new javax.swing.JPanel();
		jScrollPane5 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jButton1 = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jButton5 = new JButton();
		menuBar = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		openMenuItem = new javax.swing.JMenuItem();
		saveMenuItem = new javax.swing.JMenuItem();
		exitMenuItem = new javax.swing.JMenuItem();
		helpMenu = new javax.swing.JMenu();
		contentMenuItem = new javax.swing.JMenuItem();
		aboutMenuItem = new javax.swing.JMenuItem();
		jScrollPane2 = new JScrollPane();
		this.setTitle("数据导入工具");
		// setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
//		this.addWindowListener(new WindowAdapter(){
//			@Override
//			public void windowClosing(WindowEvent e) {
//				// TODO Auto-generated method stub
//				super.windowClosing(e);
//				System.exit(0);
//			}
//		});
//		desktopPane.setBackground(new java.awt.Color(236, 233, 216));
		desktopPane.setBackground(new java.awt.Color(245, 243, 236));

		jScrollPane1.setBackground(new java.awt.Color(244, 241, 229));
		jScrollPane2.setBackground(new java.awt.Color(244, 241, 229));
		jScrollPane4.setBackground(new java.awt.Color(244, 241, 229));
		jScrollPane5.setBackground(new java.awt.Color(244, 241, 229));
		jScrollPane1
				.setBorder(javax.swing.BorderFactory
						.createTitledBorder("数据库建表并导入"));
		jScrollPane1
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPane1
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

		jButton3.setText("选择全部要素");
		jButton3.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
//				try {
					if (jClist.size() != 0) {
						for (JCheckBox jCheckBox : jClist) {
							jCheckBox.setSelected(true);
							createtableMap.put(jCheckBox.getActionCommand(), Arrays.asList(Util.allelement.get(jCheckBox.getText())[0].split(",")));
						}
					}
//				} catch (Exception e1) {
//					// TODO: handle exception
//					e1.printStackTrace();
//				}
//					
				}
					

		});
		jButton4.setText("开始建表并导入");
		jButton4.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				jButton4ActionPerform(e);
			}
			
		});
		jButton5.setText("对选择项反选");
		jButton5.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (jClist.size() != 0) {
					for (JCheckBox jCheckBox : jClist) {
						if (jCheckBox.isSelected() == false) {
							jCheckBox.setSelected(true);
							createtableMap.put(jCheckBox.getActionCommand(), Arrays.asList(Util.allelement.get(jCheckBox.getText())[0].split(",")));
						} else {
							jCheckBox.setSelected(false);
							createtableMap.remove(jCheckBox.getActionCommand());
						}
					}

				}
			}
			
		});
		jPanel1.setLayout(null);
		jPanel1.setBackground(new java.awt.Color(244, 241, 229));
		jButton3.setBounds(10, 200, 110, 20);
		jButton5.setBounds(150, 200, 130, 20);
		jButton4.setBounds(300, 200, 130, 20);
		jScrollPane1.setViewportView(jPanel1);

		jPanel1.add(jButton3);
		jPanel1.add(jButton4);
		jPanel1.add(jButton5);
		jScrollPane1.setBounds(10, 10, 450, 250);
		jScrollPane2.setBounds(10, 10, 410, 180);
//		jScrollPane2.setBackground(new Color(230,230,230));
		jScrollPane2.setBorder(BorderFactory.createTitledBorder("选择导入要素"));
		jScrollPane2
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jPanel2.setBackground(new java.awt.Color(244, 241, 229));
		jPanel4.setBackground(new java.awt.Color(244, 241, 229));
//		jPanel2.setBackground(new Color(230,230,230));
		jPanel2.setLayout(new GridLayout(Util.tablenameList.size()/2+1, 2));
		for (int i = 0; i < Util.tablenameList.size(); i++) {
			JCheckBox jCheckBox = new JCheckBox(Util.tablenameList.get(i));
			jCheckBox.setBackground(new java.awt.Color(244, 241, 229));
			jCheckBox.addActionListener(new Jcheckerlistener(jCheckBox
					.getText(), jCheckBox, createtableMap));
			jPanel2.add(jCheckBox);
			jClist.add(jCheckBox);
		}
		
		jScrollPane2.setViewportView(jPanel2);
		jPanel1.add(jScrollPane2);
		desktopPane.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

		jScrollPane4.setBorder(javax.swing.BorderFactory
				.createTitledBorder("导入数据信息"));
		jScrollPane4
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPane4
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

		jTextArea1.setColumns(20);
		jTextArea1.setRows(10);
		jScrollPane5.setViewportView(jTextArea1);

		jButton1.setText("终止导入");
		jButton1.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(ImportMain.x == 1 ){
					setTextCon("并未开启导入");
				}else {
					setTextCon("正在结束导入请等待");
					Util.flag = false;
				}
			}
			
		});
		jLabel1
				.setText("已导入文件数/总导入文件数：");

		jLabel2.setText("0");

		jLabel3.setText("/");

		jLabel4.setText("0");

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(
				jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout
				.setHorizontalGroup(jPanel4Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel4Layout
										.createSequentialGroup()
										.addGroup(
												jPanel4Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel4Layout
																		.createSequentialGroup()
																		.addGap(
																				42,
																				42,
																				42)
																		.addComponent(
																				jLabel1)
																		.addGap(
																				27,
																				27,
																				27)
																		.addComponent(
																				jLabel2)
																		.addGap(
																				31,
																				31,
																				31)
																		.addComponent(
																				jLabel3)
																		.addGap(
																				36,
																				36,
																				36)
																		.addComponent(
																				jLabel4))
														.addGroup(
																jPanel4Layout
																		.createSequentialGroup()
																		.addGap(
																				160,
																				160,
																				160)
																		.addComponent(
																				jButton1))
														.addGroup(
																jPanel4Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jScrollPane5,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				400,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addContainerGap(100, Short.MAX_VALUE)));
		jPanel4Layout
				.setVerticalGroup(jPanel4Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel4Layout
										.createSequentialGroup()
										.addGap(18, 18, 18)
										.addGroup(
												jPanel4Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel1)
														.addComponent(jLabel2)
														.addComponent(jLabel3)
														.addComponent(jLabel4))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												jScrollPane5,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												150,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												15, Short.MAX_VALUE)
										.addComponent(jButton1)));

		jScrollPane4.setViewportView(jPanel4);

		jScrollPane4.setBounds(10, 260, 450, 260);
		desktopPane.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

		fileMenu.setText("修改");

		openMenuItem.setText("修改数据库连接");
		fileMenu.add(openMenuItem);
		openMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JOptionPane jop = new JOptionPane();
				if(ImportMain.x == 0 ){
					jop.showMessageDialog(null, "导入并未结束，请等待导入结束后或者终止结束后重新尝试");
					return;
				}
				ShpConf conf = new ShpConf();
				Selecter s = new Selecter(conf.getSrid());
				s.addWindowFocusListener(new WindowFocusListener() {

					@Override
					public void windowGainedFocus(WindowEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void windowLostFocus(WindowEvent e) {
						// TODO Auto-generated method stub
						e.getWindow().toFront();
					}
				});
				s.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
				s.setResizable(false);
				s.setVisible(true);
			}
		});
		saveMenuItem
				.setText("修改导入数据格式及路径");
		fileMenu.add(saveMenuItem);
		saveMenuItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JOptionPane jop = new JOptionPane();
				if(ImportMain.x == 0 ){
					jop.showMessageDialog(null, "导入并未结束，请等待导入结束后或者终止结束后重新尝试");
					return;
				}
				ShpConf conf = new ShpConf();
				String inputString = conf.getInputpath();
				String imtypeString = conf.getStrImportType();
				Fileinputpath fileinput = new Fileinputpath(imtypeString,
						inputString, Form.this);
				
				fileinput.addWindowFocusListener(new WindowAdapter(){
					@Override
					public void windowGainedFocus(WindowEvent e) {
						// TODO Auto-generated method stub
						super.windowGainedFocus(e);
						Form.this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
					}
					
					@Override
					public void windowLostFocus(WindowEvent e) {
						// TODO Auto-generated method stub
						super.windowLostFocus(e);
						e.getWindow().toFront();
					}
				});

				fileinput.addWindowListener(new WindowAdapter(){
					public void windowClosing(WindowEvent e) {
						// TODO Auto-generated method stub
						((Fileinputpath)e.getWindow()).setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
						setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
					}
				});
				fileinput.setVisible(true);

			}
		});
		exitMenuItem.setText("退出");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				JOptionPane jop = new JOptionPane();
//				if(ImportMain.x == 0 ){
//					jop.showMessageDialog(null, "导入并未结束，请等待导入结束后或者终止结束后重新尝试");
//					return;
//				}
				exitMenuItemActionPerformed(evt);
			}
		});
		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		helpMenu.setText("帮助");

		contentMenuItem.setText("导入用法");
		helpMenu.add(contentMenuItem);
		contentMenuItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JOptionPane jop = new JOptionPane();
				jop.showMessageDialog(null,
						"点击选择导入要素框中您所要导入的数据及其要导入的字段，\n选择好后点击“开始建表并导入即可”\n(此工具会自动建立element，mapdata两张表来帮助您使用数据)");
			}

		});
		aboutMenuItem.setText("关于");
		helpMenu.add(aboutMenuItem);
		aboutMenuItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				JOptionPane jop = new JOptionPane();
				jop.showMessageDialog(null, "有问题，请联系温晓宸");
			}

		});
		menuBar.add(helpMenu);

		setJMenuBar(menuBar);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 550,
				Short.MAX_VALUE));
		this.setIconImage(Toolkit.getDefaultToolkit().createImage(this.getClass().getResource("/load1/apple.JPG")));
		pack();
	}// </editor-fold>

	// GEN-END:initComponents

	private void jButton4ActionPerform(ActionEvent e) {
		// TODO Auto-generated method stub
		
		JOptionPane jop = new JOptionPane();
		if(ImportMain.x == 0 ){
			jop.showMessageDialog(null, "导入并未结束，请等待导入结束后或者终止结束后重新尝试");
			return;
		}else {
			if(createtableMap.size() == 0){
				jop.showMessageDialog(null, "请选择所要导入的要素");
				return;
			}
			ImportMain.x = 0;
		}
		Set<Entry<String, List<String>>> set = createtableMap.entrySet();
		Iterator<Entry<String, List<String>>> iterator = set.iterator();
//		Map<String, Table> tempMap = new HashMap<String, Table>();
		Map<String, String[]> element = new HashMap<String, String[]>();
		List<Table> tableList = new ArrayList<Table>();
		while (iterator.hasNext()) {
			Entry<String, List<String>> entry =iterator.next();
			Table aTable = new Table();
			aTable.setTableName(entry.getKey());
			aTable.setFieldList(Util.tableMap.get(entry.getKey()).getField());
			List<String> list = entry.getValue();
			List<String[]> field= aTable.getField();
			for (int i = 0; i<field.size();i++) {
				if(!list.contains(field.get(i)[0])){
					field.remove(field.get(i));
					i--;
				}
			}
//			tempMap.put(entry.getKey(), aTable);
			tableList.add(aTable);
			String allattname = "";
			for (String string : list) {
				allattname = allattname + string + ",";
			}
			allattname = allattname.substring(0, allattname.length() - 1);
			String[] strallttnamescope = new String[]{allattname,Util.allelement.get(entry.getKey())[1]};
			element.put(entry.getKey(), strallttnamescope);
		}
//		ImportMain importMain = new ImportMain();
		Util.createtableList = new ArrayList<Table>();
		Util.createtableList = tableList;
		Util.element = new HashMap<String, String[]>();
		Util.element = element;
		jTextArea1.setText("");
		String existElemnetString = ImportMain.returnElement();
		if(!"".equals(existElemnetString)){
			InformationPoint kk = new InformationPoint(this,true,existElemnetString);
			kk.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent e) {
					e.getWindow().dispose();
				}
			});
			kk.setVisible(true);
		}else {
			t = new Thread(){
				public void run() {
					super.run();
					try {
						new ImportMain().createAndImport();
					} catch (Exception e) {
						ImportData.x =1;
						e.printStackTrace();
					}
				};
			};
			t.start();
		}
//		Util.tableMap = new HashMap<String, Table>();
//		Util.tableMap.putAll(tempMap);
//		Set<Entry<String, Table>> set1 = tempMap.entrySet();
//		for (Entry<String, Table> entry : set1) {
//			System.out.println(entry.getKey() + ":" + entry.getValue().getField().size());
//		}
	}

	public static void setTextCon(String ss){
		jTextArea1.append(ss + "\n");
		jTextArea1.paintImmediately(
				jTextArea1.getBounds());
		jTextArea1.setCaretPosition(jTextArea1.getText().length()-1);
	}
	
	public static void setLabel2(String ds){
		jLabel2.repaint();
		jLabel2.setText(ds);
	}
	public static void setLabel4(String ds){
		jLabel4.repaint();
		jLabel4.setText(ds);
	}
	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitMenuItemActionPerformed
		System.exit(0);
	}
	// GEN-LAST:event_exitMenuItemActionPerformed

	// public static setjCheck(){
	//		
	// }
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Form().setVisible(true);
			}
		});
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JMenuItem aboutMenuItem;
	private javax.swing.JMenuItem contentMenuItem;
	private javax.swing.JDesktopPane desktopPane;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JMenu helpMenu;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private JButton jButton5;
	private javax.swing.JLabel jLabel1;
	private static javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private static javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	private JPanel jPanel2;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane5;
	private static javax.swing.JTextArea jTextArea1;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JMenuItem openMenuItem;
	private javax.swing.JMenuItem saveMenuItem;
	private List<JCheckBox> jClist = new ArrayList<JCheckBox>();
	private Map<String, List<String>> createtableMap = new HashMap<String, List<String>>();
	private Thread t;
	// End of variables declaration//GEN-END:variables

}